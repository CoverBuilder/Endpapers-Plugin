
/*
  
  Endpapers: A CoverBuilder plugin

  Create end-papers in InDesign

  https://github.com/CoverBuilder/Endpapers-Plugin

  Bruno Herfst 2018

*/

(function() {

    var Endpapers = {
        version: 1.0
    };

    //-------------
    // Load Modules
    //-------------
/*

    ExtendScript Modules Init
    https://github.com/ExtendScript/extendscript-modules

*/

$.global.hasOwnProperty('Sky')||(function(HOST, SELF) {  
    // The HOST/SELF setup was suggested by Marc Autret
    // https://forums.adobe.com/thread/1111415
    var VERSION = 1.0;

    if(HOST[SELF] && HOST[SELF].version > VERSION) return HOST[SELF];  
    HOST[SELF] = SELF;
    SELF.version = VERSION;  

    //    P R I V A T E
    //---------------------
    var INNER = {};  

    INNER.manage = function (hanger, path, depth, callback, upsert) {
        var err = null;

        for (var i = 0; i < depth; i++) {
            var key = path[i];

            if(hanger != null) {
                "undefined" === typeof hanger[key] && upsert && (hanger[key] = isNaN(path[i + 1]) && {} || []); // If next key is an integer - create an array, else create an object.
                if("undefined" === typeof (hanger = hanger[key])) {
                    break;
                }
            } else {
                err = new TypeError("Cannot read property " + key + " of " + (null === hanger && 'null' || typeof hanger));
                break;
            }
        }
        if(callback) {
            return callback(err && String(err), !err && hanger);
        } else {
            return err || hanger;
        }
    };

    INNER.get = function( hanger, path, callback ) {
        var pathArr = path && path.split(".") || [];
        return INNER.manage(hanger, pathArr, pathArr.length, callback, false);
    };

    INNER.set = function ( hanger, path, value, callback ) {
        var pathArr = path && path.split(".") || [];
        var depth = pathArr.length - 1;
        var lastKey = pathArr[depth];
        var upsert = true;
        var result = callback || INNER.manage(hanger, pathArr, depth, callback, upsert);
        var setter = function (obj, key, val) {
                return null != obj && key ? obj[key] = val :
                    new TypeError("Cannot set property " + key + " of " + (null === obj && 'null' || typeof obj));
            };

        if(callback) {
            INNER.manage(hanger, pathArr, depth, function (err, obj) {
                err || (result = setter(obj, lastKey, value)) instanceof Error && (err = String(result));
                callback(err, !err && hanger);
            }, upsert);
        } else {
            if(result instanceof Error || (result = setter(result, lastKey, value)) instanceof Error) {
                throw result;
            }
        };

        return SELF;
    };

    //    P U B L I C 
    //---------------------

    SELF.patch = {};
    SELF.module = {};
    SELF.util = {};
    
    // generic unload pattern  
    // ---  
    SELF.unload = function() {  
        var k;  
        for( k in INNER ) {  
            if( !(INNER.hasOwnProperty(k)) ) continue;  
            INNER[k]=null;  
            delete INNER[k];  
        };
        for( k in SELF ) {  
            if( !(SELF.hasOwnProperty(k)) ) continue;  
            SELF[k]=null;  
            delete SELF[k];  
        }  
        INNER = SELF = null;  
    };

    SELF.getPatch = function( path, callback ) {
        return INNER.get(SELF.patch, path, callback);
    };

    SELF.getModule = function( path, callback ) {
        return INNER.get(SELF.module, path, callback);
    };

    SELF.getUtil = function( path, callback ) {
        return INNER.get(SELF.util, path, callback);
    };

    SELF.setPatch = function( path, value, callback ) {
        return INNER.set(SELF.patch, path, value, callback);
    };

    SELF.setModule = function( path, value, callback ) {
        return INNER.set(SELF.module, path, value, callback);
    };

    SELF.setUtil = function( path, value, callback ) {
        return INNER.set(SELF.util, path, value, callback);
    };

})($.global,{toString:function(){return 'Sky';}});

(function () {
    var VERSION = 1.0;
    var MODULE_PATH = "rulers";

    var rulers = Sky.getUtil(MODULE_PATH);
    if( rulers && rulers.version >= VERSION) {
      return;
    };

    //--------------------------
    // start rulers

    rulers = {
      "version" : VERSION
    };

    rulers.set = function (Doc, NewUnits) {
        var OldUnits = { xruler    : Doc.viewPreferences.horizontalMeasurementUnits, 
                         yruler    : Doc.viewPreferences.verticalMeasurementUnits, 
                         origin    : Doc.viewPreferences.rulerOrigin, 
                         zeroPoint : Doc.zeroPoint };

        if (NewUnits.hasOwnProperty('xruler') && NewUnits.hasOwnProperty('yruler')){
            Doc.viewPreferences.horizontalMeasurementUnits = NewUnits.xruler;
            Doc.viewPreferences.verticalMeasurementUnits   = NewUnits.yruler;
        } else if( NewUnits.hasOwnProperty('units')) {
            // Set both rulers to the same unit
            // We will cast everything to string so it can parse a wide variety of input including the MeasurementUnits object
            var stringUnits = String(NewUnits.units).toLowerCase();
            with(Doc.viewPreferences){
                switch(stringUnits) {
                    case "0":
                    case "millimeters":
                    case "mm":
                    case "millimeter":
                    case "zmms":
                    case "2053991795":
                        horizontalMeasurementUnits = MeasurementUnits.MILLIMETERS;
                        verticalMeasurementUnits   = MeasurementUnits.MILLIMETERS;
                        break;
                    case "1":
                    case "inchesDecimal":
                    case "inch": // shorthand to decimal
                    case "zoll":
                    case "pouce":
                    case "zind":
                    case "2053729892":
                        horizontalMeasurementUnits = MeasurementUnits.INCHES_DECIMAL;
                        verticalMeasurementUnits   = MeasurementUnits.INCHES_DECIMAL;
                        break;
                    case "inches":
                    case "zinc":
                    case "2053729891":
                        horizontalMeasurementUnits = MeasurementUnits.INCHES;
                        verticalMeasurementUnits   = MeasurementUnits.INCHES;
                        break;
                    case "2":
                    case "points":
                    case "pt":
                    case "zpoi":
                    case "2054188905":
                        horizontalMeasurementUnits = MeasurementUnits.POINTS;
                        verticalMeasurementUnits   = MeasurementUnits.POINTS;
                        break;
                    case "american_points":
                    case "apt":
                    case "zapt":
                    case "1514238068":
                        horizontalMeasurementUnits = MeasurementUnits.AMERICAN_POINTS;
                        verticalMeasurementUnits   = MeasurementUnits.AMERICAN_POINTS;
                        break;
                    case "agates":
                    case "zagt":
                    case "2051106676":
                        horizontalMeasurementUnits = MeasurementUnits.AGATES;
                        verticalMeasurementUnits   = MeasurementUnits.AGATES;
                        break;
                    case "bai":
                    case "zbai":
                    case "2051170665":
                        horizontalMeasurementUnits = MeasurementUnits.BAI;
                        verticalMeasurementUnits   = MeasurementUnits.BAI;
                        break;
                    case "cm":
                    case "centimeter":
                    case "centimeters":
                    case "zcms":
                    case "2053336435":
                        horizontalMeasurementUnits = MeasurementUnits.CENTIMETERS;
                        verticalMeasurementUnits   = MeasurementUnits.CENTIMETERS;
                        break;
                    case "ciceros":
                    case "c":
                    case "zcic":
                    case "2053335395":
                        horizontalMeasurementUnits = MeasurementUnits.CICEROS;
                        verticalMeasurementUnits   = MeasurementUnits.CICEROS;
                        break;
                    case "custom":
                    case "cstm":
                    case "1131639917":
                        horizontalMeasurementUnits = MeasurementUnits.CUSTOM;
                        verticalMeasurementUnits   = MeasurementUnits.CUSTOM;
                        break;
                    case "ha":
                    case "zha":
                    case "1516790048":
                        horizontalMeasurementUnits = MeasurementUnits.HA;
                        verticalMeasurementUnits   = MeasurementUnits.HA;
                        break;
                    case "mils":
                    case "zmil":
                    case "2051893612":
                        horizontalMeasurementUnits = MeasurementUnits.MILS;
                        verticalMeasurementUnits   = MeasurementUnits.MILS;
                        break;
                    case "picas":
                    case "p":
                    case "zpic":
                    case "2054187363":
                        horizontalMeasurementUnits = MeasurementUnits.PICAS;
                        verticalMeasurementUnits   = MeasurementUnits.PICAS;
                        break;
                    case "pixels":
                    case "pixel":
                    case "px":
                    case "zpix":
                    case "2054187384":
                        horizontalMeasurementUnits = MeasurementUnits.PIXELS;
                        verticalMeasurementUnits   = MeasurementUnits.PIXELS;
                        break;
                    case "q":
                    case "zque":
                    case "2054255973":
                        horizontalMeasurementUnits = MeasurementUnits.Q;
                        verticalMeasurementUnits   = MeasurementUnits.Q;
                        break;
                    case "u":
                    case "zju":
                    case "2051691808":
                        horizontalMeasurementUnits = MeasurementUnits.U;
                        verticalMeasurementUnits   = MeasurementUnits.U;
                        break;
                    default:
                        alert("ExtendScript Modules ind.util.rulers.set:\nCould not parse MeasurementUnits: " + typeof(NewUnits) + " " + NewUnits );
                        break;
                }
            }
        }

        if(NewUnits.hasOwnProperty('origin')){
            Doc.viewPreferences.rulerOrigin = NewUnits.origin;
        } else { // Use page origin if not defined
            Doc.viewPreferences.rulerOrigin = RulerOrigin.pageOrigin;
        };

        if(NewUnits.hasOwnProperty('zeroPoint')) {
            Doc.zeroPoint = NewUnits.zeroPoint;
        } else { // Use zero point if not defined
            Doc.zeroPoint = [0,0];
        };

        return OldUnits;
    };
    //--------------------------
    // End rulers

    Sky.setUtil(MODULE_PATH, rulers);

})();


    //-------------
    // Load Application
    //-------------
Endpapers.create = function ( ) {

    // Load the rulers util
    var Rulers = Sky.getUtil("rulers");

    var booktitle = "Untitled";
    
    var data = { width       : 0,
                 height      : 0,
                 bleed       : 5,
                 marginTop   : 0,
                 marginBot   : 0, 
                 marginLeft  : 0, 
                 marginRight : 0 };

    var sourceDoc = app.documents[0];
    if( sourceDoc.isValid ) {
        booktitle = sourceDoc.metadataPreferences.documentTitle;
 
        // OK, lets get the width, height and margins of source document
        // An InDesign document has at least one page
        // Save old rulers and set rulers to mm to get all measurements in mm
        var originalRulers = Ruler.set(sourceDoc, {units : 0});

        data = { width       : sourceDoc.documentPreferences.pageWidth,
                 height      : sourceDoc.documentPreferences.pageHeight,
                 bleed       : sourceDoc.documentPreferences.documentBleedTopOffset,
                 marginTop   : sourceDoc.pages[0].marginPreferences.top,
                 marginBot   : sourceDoc.pages[0].marginPreferences.bottom, 
                 marginLeft  : sourceDoc.pages[0].marginPreferences.left, 
                 marginRight : sourceDoc.pages[0].marginPreferences.right }

        // reset original rulers
        Ruler.set(sourceDoc, originalRulers);
    };

    // Create dialog for size
    var dlg = app.dialogs.add({name:"Create Endpapers"});

    with(dlg.dialogColumns.add()){
        with(dialogRows.add()){
            with(dialogColumns.add()){
                var widthLabel  = staticTexts.add({staticLabel:"Width:"});
                var heightLabel = staticTexts.add({staticLabel:"Height:"});
                var bleedLabel  = staticTexts.add({staticLabel:"Bleed:"});
            }
            with(dialogColumns.add()){
                var widthField  = measurementEditboxes.add({editUnits: MeasurementUnits.MILLIMETERS,editValue:CB.NumCon.convert(CB, data.width,  0, 2, 3)});
                var heightField = measurementEditboxes.add({editUnits: MeasurementUnits.MILLIMETERS,editValue:CB.NumCon.convert(CB, data.height, 0, 2, 3)});
                var bleedField  = measurementEditboxes.add({editUnits: MeasurementUnits.MILLIMETERS,editValue:CB.NumCon.convert(CB, data.bleed,  0, 2, 3)});
            } 
        }
    };
    
    if(dlg.show() == true){
        data.height = CB.NumCon.convert(CB, heightField.editValue, 2, 0, 3); 
        data.width  = CB.NumCon.convert(CB, widthField.editValue,  2, 0, 3); 
        data.bleed  = CB.NumCon.convert(CB, bleedField.editValue,  2, 0, 3); 
    } else {
        return "User pressed cancel";
    };
    
    // Then create a new doc based on those values
    
    //Set the application default margin preferences.
    with (app.marginPreferences){
        //Save the current application default margin preferences.
        var originalTop    = top;
        var originalLeft   = left;
        var originalBottom = bottom;
        var originalRight  = right;
        var originalColumnGutter = columnGutter;
        var originalColumnCount  = columnCount;
        
        //Set the application default margin preferences.
        top    = data.marginTop + "mm";
        left   = data.marginLeft + "mm";
        bottom = data.marginBot + "mm";
        right  = data.marginRight + "mm";
        columnGutter = 0;
        columnCount  = 1;
    };

    // Make a new document.
    var doc = app.documents.add();
    
    // set rulers to mm
    var originalRulers = Ruler.set(doc, {units : 0});

    // safe the title as meta data
    doc.metadataPreferences.documentTitle = booktitle;
    
    try {
        with(doc.documentPreferences){
            pageHeight  = data.height;
            pageWidth   = data.width;
            facingPages = true;
            //Bleed
            documentBleedUniformSize = true;
            documentBleedTopOffset   = data.bleed;
            // Slug
            documentSlugUniformSize = true;
            slugTopOffset = (data.bleed + 5);
        }
    } catch(err){
        alert("InDesign can't create a page that size.");
        return;
    };
    
    var myEndPaperSpread = doc.spreads.add(LocationOptions.AFTER,doc.spreads[0]);
    
    // get Layer
    var myLayer = CB.Tools.getAndSelectLayer(doc, "Art");
    // unlock layer
    var originalLock = CB.Tools.layerLocked(myLayer, false);

    var myRect = CB.Tools.newRect2SpreadBleed(CB, doc, myEndPaperSpread, myLayer, 0);
    myRect.contentType = ContentType.GRAPHIC_TYPE;
    
    // restore layer
    CB.Tools.layerLocked(myLayer, originalLock);
    
    // duplicate the page
    doc.spreads[0].duplicate(LocationOptions.AFTER, doc.spreads[1]);
    
    // Now have the basic settings we can duplicate this setup for the back end-papers
    var spreadLen = doc.spreads.length;
    for(var i=0; i<spreadLen; i++){
        doc.spreads[i].allowPageShuffle = false;
        doc.spreads[i].duplicate(LocationOptions.AFTER, doc.spreads[doc.spreads.length-1]);
    }

    // Add the Stuck-down text on first and last page

    var myParagraphStyle = CB.Slugs.getMeasureParagraphStyle(CB, doc, "measurements", CB.Settings.registration_font);
    var regLayer         = CB.Tools.getAndSelectLayer(  doc, "Registration");

    var myPage = doc.pages[0];
    var PageIO = CB.Tools.makePageInfoObject(CB, doc, myPage, 0);
    CB.Tools.addTextFrame(CB, myPage, PageIO.bounds, "< Stuckdown >", myParagraphStyle, 0, "Stuck-down");

    myPage = doc.pages[doc.pages.length-1];
    PageIO = CB.Tools.makePageInfoObject(CB, doc, myPage, 0);
    CB.Tools.addTextFrame(CB, myPage, PageIO.bounds, "< Stuckdown >", myParagraphStyle, 0, "Stuck-down");
    
    //Reset the application default margin preferences to their former state.
    with (app.marginPreferences){
        top    = originalTop;
        left   = originalLeft;
        bottom = originalBottom;
        right  = originalRight;
        columnGutter = originalColumnGutter;
        columnCount  = originalColumnCount;
    };

    // reset original rulers
    Rulers.set(doc, originalRulers);

};


    return Endpapers;

})();
